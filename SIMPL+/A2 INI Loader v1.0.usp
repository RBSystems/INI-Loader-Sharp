/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Programmer:	Nicholas Pepper, CTS-D, CTS-I
Version: 1.0
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "A2 INI Loader v1.0"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
INI Style Syntax Loader v1.0 by Nicholas Pepper

This module set is BSD licensed (see license.txt) so please attribute me on modifications
and even better, make submissions to improve this module set.

This module will load an INI style file and process the input through the other modules.
The other modules can hadle digitals, analogs and strings (each has their own module).
Section and key are automatically passed to the receiver modules through the common memory
in S#.  Changes to the items are passed back to the loader for saving upon request.  The
default file name is set to 'system.conf' and is located within the specific running programs
individual directory ( \NVRAM\<ProgramID>\<FileName> ).

INI File syntax for my use is as follows:

--START INI Example --------------------------------------------

[section_name]
key = value ;Comments are semicolon based

[section1]
digital1 = 0     ;for false
digital2 = 1     ;for true
digital3 = true  ;also works
digital4 = fa    ;also works

[section2]
analog1 = 10     ;general unsigned value
analog2 = -10    ;will send signed values
analog3 = 10s    ;will parse seconds (multiples number by 100)

[section3]
serial1 = A serial string ;general serial string

--END INI Example ----------------------------------------------

[section_name] corresponds to the 'section' parameter in each digital, analog or string module
'key' corresponds to the parameter in between each input and output in the modules

**IMPORTANT NOTE** At this time, when a signed integer is read, it is saved back as unsigned
because I have not written code to handle this yet.

INPUTS ---------------------------------------------------------

read : puse to read the file and populate the outputs on the receivers
save : if dirty will save the data to the file
filename$ : default is 'system.conf' however you can send in a new name if you'd like

OUTPUTS --------------------------------------------------------

dirty : will be high when a change has been noted in any one of the companion modules

PARAMETERS -----------------------------------------------------

NONE

#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

#USER_SIMPLSHARP_LIBRARY "INI_Loader_v10"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT read, save;
// ANALOG_INPUT 
STRING_INPUT filename$[255];
// BUFFER_INPUT 

DIGITAL_OUTPUT dirty;
// ANALOG_OUTPUT 
// STRING_OUTPUT 

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER isDirty;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
callback function setDirty()
{
	isDirty = 1;
	dirty = 1;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH read
{
    INILoader.read();
}

PUSH save
{
	if(isDirty && INILoader.save())
	{
		isDirty = 0;
		dirty = 0;
	}
}

CHANGE filename$
{
    INILoader.setFilename("system.conf");
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	//this is setting the default filename if none was specified
    INILoader.setFilename("system.conf");
    dirty = 0;
    RegisterDelegate(INIFile, dirtyEvent, setDirty); 
}

