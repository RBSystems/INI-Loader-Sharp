/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Programmer: Nicholas Pepper, CTS-D, CTS-I
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "A2 INI Strings v1.0"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "12" 
#PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
#HELP_BEGIN

INI Style Syntax Loader Zone Module v1.0 by Nicholas Pepper

This module set is BSD licensed (see license.txt) so please attribute me on modifications
and even better, make submissions to improve this module set.

This is the zone module to be placed anywhere in your programs that you need them.  It will
look for the individual 'section' from the INI file and then populate any matching 'keys'
with their corresponding value.

Values accepted currently are any ASCII text value.  I have not tried unicode or international
strings or characters yet.

Saving values will happen ONLY if the corresponding section and key exist within the loaded
INI file itself.  You cannot use this at this point to generate an INI file base.  This will
be a later addition.

See the loader for file loading, saving and format specifics.

INPUTS ---------------------------------------------------------

strings : any input here will be noted to save as a change (if key exists in file only)

OUTPUTS --------------------------------------------------------

strings_fb : the value read from the file

PARAMETERS -----------------------------------------------------

parameter : the key to look for in the INI file in the key = value sequence
section : the header to look for in this module instance; e.g. [section1]

#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/

#USER_SIMPLSHARP_LIBRARY "INI_Loader_v10"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
STRING_INPUT strings_fb[16,16][128];
STRING_OUTPUT strings[16,16];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER parameter[16,16][16];
STRING_PARAMETER section[64];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES parameter
   propValidUnits = unitString; //or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   propDefaultUnit = unitString; //, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   propDefaultValue = "";  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INIZone myZone;
integer index;
integer semaphore;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
function disallowFb()
{
	if (!semaphore)
	{
		semaphore = 1;
		wait(100, sem)
		{
			semaphore = 0;
		}
	}
	else
	{
		retimewait(100, sem);
	}
}

eventhandler populateOutputsHandler(INIZone sender, EventArgs args)
{
	if (section != "")
	{
		for (index = 1 to 16)
		{
			if (parameter[index] != "" && parameter[index] != "0d")
				myZone.sendString(parameter[index]);
		}
	}
}

callback function sendOutputString(dataValidity valid, string d)
{
	if (valid = dataValidity.validData)
	{
		strings[index] = d;
		disallowFb();
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
change strings_fb
{
	integer x;
	
	x = getLastModifiedArrayIndex();
	
	if (!semaphore && parameter[x] != "" && parameter[x] != "0d")
	{
		myZone.addChangeString(parameter[x], strings_fb[x]);
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	semaphore = 0;
	myZone.setSection(section);
	RegisterEvent(myZone, populateOutputs, populateOutputsHandler);
	RegisterDelegate(myZone, stringD, sendOutputString);
}

